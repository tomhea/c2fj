

// ---------- Init:


ns riscv {
    MEM = 1<<(w-1)                      // start of memory
    JMP = .MEM - (.MEM / 32)            // start of jump table
    BLEN = 4                            // register size in byte-variables
    HLEN = .BLEN * 2                    // register size in hex-variables
    REGISTER_SIZE = .HLEN*dw            // register-variable size in memory bits


    def byte val {
        ;(val > 0xff ? 0xff : (val < 0 ? 0 : val)) * dw
    }
    def byte {
        .byte 0
    }
    ns byte {
        def vec n, val {
            rep(n, i) ..byte (val>>(8*i))&0xff
        }
    }

    def init sbrk_initial_address {
        .regs.init
        .fast_macros
        .init_sbrk_ptr sbrk_initial_address
    }

    ns regs {
        def init > start {
          start:
            .init_x0_to_x4
            .init_x5_to_x7
            .init_x8_to_x9
            .init_x10_to_x17
            .init_x18_to_x27
            .init_x28_to_x31
            .init_pc
        }
        
        def register {
            hex.vec ..HLEN
        }

        def init_x0_to_x4 > x0, zero, x1, ra, x2, sp, x3, gp, x4, tp {
          x0:
          zero:
            .register
          x1:
          ra:
            .register
          x2:
          sp:
            .register
          x3:
          gp:
            .register
          x4:
          tp:
            .register
        }

        def init_x5_to_x7 > x5, t0, x6, t1, x7, t2 {
          x5:
          t0:
            .register
          x6:
          t1:
            .register
          x7:
          t2:
            .register
        }

        def init_x8_to_x9 > x8, s0, fp, x9, s1 {
          x8:
          s0:
          fp:
            .register
          x9:
          s1:
            .register
        }

        def init_x10_to_x17 > x10, a0, x11, a1, x12, a2, x13, a3, x14, a4, x15, a5, x16, a6, x17, a7 {
          x10:
          a0:
            .register
          x11:
          a1:
            .register
          x12:
          a2:
            .register
          x13:
          a3:
            .register
          x14:
          a4:
            .register
          x15:
          a5:
            .register
          x16:
          a6:
            .register
          x17:
          a7:
            .register
        }

        def init_x18_to_x27 > x18, s2, x19, s3, x20, s4, x21, s5, x22, s6, x23, s7, x24, s8, x25, s9, x26, s10, x27, s11 {
          x18:
          s2:
            .register
          x19:
          s3:
            .register
          x20:
          s4:
            .register
          x21:
          s5:
            .register
          x22:
          s6:
            .register
          x23:
          s7:
            .register
          x24:
          s8:
            .register
          x25:
          s9:
            .register
          x26:
          s10:
            .register
          x27:
          s11:
            .register
        }

        def init_x28_to_x31 > x28, t3, x29, t4, x30, t5, x31, t6 {
          x28:
          t3:
            .register
          x29:
          t4:
            .register
          x30:
          t5:
            .register
          x31:
          t6:
            .register
        }

        def init_pc > pc {
          pc:
            .register
        }
    }

    def init_sbrk_ptr sbrk_initial_address > sbrk_ptr {
      sbrk_ptr:
        hex.vec .HLEN, sbrk_initial_address
    }


    ns syscall {
        //  Time Complexity: 4@+268
        // Space Complexity: 6@+364
        //    prints the exit code (stored at src_register), then finishes.
        def exit src_register {
            stl.output "Program exited with exit code "
            hex.print_uint 2, src_register, 1, 1
            stl.output ".\n"
            stl.loop
        }

        //  Time Complexity: 2@
        // Space Complexity: 2@+52
        //   output the least-significant byte of src_register.
        def write_byte src_register {
            hex.print src_register
        }

        //  Time Complexity: 10@+14
        // Space Complexity: 10@+108
        //   dst_register = input(8bits)
        def read_byte dst_register {
            hex.zero ..HLEN-2, dst_register + 2*dw
            hex.input dst_register
        }

        // Increments riscv.heap_ptr by the value in register.
        // Returns the old riscv.heap_ptr value in register.
        def sbrk register @ old_heap_ptr, end < riscv.sbrk_ptr {
            hex.mov ..HLEN, old_heap_ptr, riscv.sbrk_ptr
            hex.add ..HLEN, riscv.sbrk_ptr, register
            hex.mov ..HLEN, register, old_heap_ptr
            ;end

          old_heap_ptr:
            riscv.regs.register

          end:
        }

    }


    def start entry_point, sbrk_initial_address {
        stl.startup_and_init_all            // inits everything flipjump needs
        ;entry_point                        // start executing riscv opcodes
        .init sbrk_initial_address          // inits registers, constants, global code stubs
    }


    def inc_pc current_address {
        .__xor_pc_value_by_const current_address ^ (current_address + 4)
    }
    def __xor_pc_value_by_const constant < .regs.pc {
        rep(.HLEN, i) .__xor_by_hex_const .regs.pc + i*dw, (constant >> (i*4)) & 0xf
    }
    def __xor_by_hex_const dst, constant {
        rep(constant != 0, _) stl.wflip_macro dst + dw, constant * dw
    }

    def set_register_value register_index, constant < .regs.start {
        rep(register_index != 0, _) hex.set .HLEN, riscv.regs.start + .REGISTER_SIZE * register_index, constant
    }

    def jump_to_constant_address current_address, new_address {
        .__xor_pc_value_by_const current_address ^ new_address
        ;.JMP + new_address/4*dw
    }

    def jump_to_pc @ ptr < .regs.pc {
        hex.zero w/4, ptr
        hex.xor .HLEN, ptr, .regs.pc
        rep(#w-2, _) hex.shl_bit w/4, ptr
        hex.add_constant w/4, ptr, .JMP

        hex.ptr_jump ptr

      ptr:
        hex.vec w/4
    }

}


// Fast calls:


ns riscv {
    // Initialize the opcode implementation stubs, to be jumped into by some of the riscv op macros.
    def fast_macros > ret, mem_ptr, mem_data, mem_op_byte_length {
      ret:
        ;0

      mem_ptr:
        hex.vec w/4

      mem_data:
        .regs.register

      mem_op_byte_length:
        hex.hex


      .fast_jump_to_pc
      .fast_read_memory
      .fast_write_memory
    }

    def fast_jump_to_pc > jump_to_pc {
      jump_to_pc:
        .jump_to_pc
    }

    // TODO check actually works (for both read / write).
    def validate_mem_ptr_below_sbrk_ptr @ raise_error, end < .mem_ptr, .sbrk_ptr {
        hex.cmp .HLEN, .mem_ptr, .sbrk_ptr, end, raise_error, raise_error

      raise_error:
        stl.output "Tried to access memory address above current brk:"
        stl.output "\n  sbrk_ptr = "
        hex.print_uint .HLEN, .sbrk_ptr, 1, 1
        stl.output "\n  mem_ptr  = "
        hex.print_uint .HLEN, .mem_ptr, 1, 1
        stl.output "\nFinished with error.\n\n"
        stl.loop

      end:
    }

    // Read .mem_op_byte_length bytes, starting from the .mem_ptr'th byte. Stores the result in .mem_data.
    // Notes:
    //  - Assumes mem_op_byte_length is one of {1,2,4}.
    //  - Assumes the value in mem_ptr is the non-fj address (i.e 32 for the 32'th byte, not 0x8000000000001000).
    //  - Alters the value of .mem_ptr; expects return address in .ret.
    def fast_read_memory @ two, read1, read2, read4 < .ret, .mem_ptr, .mem_data, .mem_op_byte_length > read_memory {
      read_memory:
        .validate_mem_ptr_below_sbrk_ptr
        rep(#w, _) hex.shl_bit w/4, .mem_ptr
        hex.add_constant w/4, .mem_ptr, .MEM

        hex.cmp .mem_op_byte_length, two, read1, read2, read4

      two:
        hex.hex 2

      read1:
        hex.read_byte .mem_data, .mem_ptr
        stl.fret .ret
      read2:
        hex.read_byte 2, .mem_data, .mem_ptr
        stl.fret .ret
      read4:
        hex.read_byte 4, .mem_data, .mem_ptr
        stl.fret .ret
    }

    // Writes .mem_op_byte_length bytes from .mem_data to the memory, starting from the .mem_ptr'th byte.
    // Notes:
    //  - Assumes mem_op_byte_length is one of {1,2,4}.
    //  - Assumes the value in mem_ptr is the non-fj address (i.e 32 for the 32'th byte, not 0x8000000000001000).
    //  - Alters the value of .mem_ptr; expects return address in .ret.
    def fast_write_memory @ two, write1, write2, write4 < .ret, .mem_ptr, .mem_data, .mem_op_byte_length > write_memory {
      write_memory:
        .validate_mem_ptr_below_sbrk_ptr
        rep(#w, _) hex.shl_bit w/4, .mem_ptr
        hex.add_constant w/4, .mem_ptr, .MEM

        hex.cmp .mem_op_byte_length, two, write1, write2, write4

      two:
        hex.hex 2

      write1:
        hex.write_byte .mem_ptr, .mem_data
        stl.fret .ret
      write2:
        hex.write_byte 2, .mem_ptr, .mem_data
        stl.fret .ret
      write4:
        hex.write_byte 4, .mem_ptr, .mem_data
        stl.fret .ret
    }
}



// ---------- opcodes

ns riscv {
    def jal rd_index, imm, current_address {
        .set_register_value rd_index, current_address + 4
        .jump_to_constant_address current_address, current_address + imm
    }

    def jalr rd_index, rs1, imm, current_address < .regs.pc, .jump_to_pc {
        hex.mov .HLEN, .regs.pc, rs1
        .set_register_value rd_index, current_address + 4
        rep(imm!=0,_) hex.add_constant .HLEN, .regs.pc, imm % (1<<(4*.HLEN))
        ;.jump_to_pc
    }

    def lui rd_index, imm {
        .set_register_value rd_index, imm
    }

    def auipc rd_index, imm, addr {
        .set_register_value rd_index, imm + addr
    }

    def beq rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, dont_jump, take_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bne rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, take_jump, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bltu rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, take_jump, dont_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bgeu rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, dont_jump, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def blt rs1, rs2, imm, addr @ take_jump, result, dont_jump {
        hex.mov .HLEN, result, rs1
        hex.sub .HLEN, result, rs2
        hex.sign .HLEN, result, take_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      result:
        .regs.register
      dont_jump:
        .inc_pc addr
    }

    def bge rs1, rs2, imm, addr @ take_jump, result, dont_jump {
        hex.mov .HLEN, result, rs1
        hex.sub .HLEN, result, rs2
        hex.sign .HLEN, result, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      result:
        .regs.register
      dont_jump:
        .inc_pc addr
    }


    def lea_to_mem_ptr rs1, imm < .mem_ptr {
        hex.zero w/4, .mem_ptr
        hex.xor .HLEN, .mem_ptr, rs1
        hex.add_constant .HLEN, .mem_ptr, imm % (1<<(4*.HLEN))
    }

    def load_op num_of_bytes, sign_extension, rd, rs1, imm @ negative_extension, end \
            < .mem_data, .ret, .mem_op_byte_length, .read_memory {
        .lea_to_mem_ptr rs1, imm

        hex.set .mem_op_byte_length, num_of_bytes
        stl.fcall .read_memory, .ret

        hex.zero .HLEN, rd
        hex.xor 2*num_of_bytes, rd, .mem_data

        stl.comp_if0 sign_extension, end
        hex.sign 2*num_of_bytes, rd, negative_extension, end

      negative_extension:
        hex.not .HLEN - 2*num_of_bytes, rd + 2*num_of_bytes * dw
      end:
    }

    def lb rd, rs1, imm {
        .load_op 1, 1, rd, rs1, imm
    }
    def lbu rd, rs1, imm {
        .load_op 1, 0, rd, rs1, imm
    }

    def lh rd, rs1, imm {
        .load_op 2, 1, rd, rs1, imm
    }
    def lhu rd, rs1, imm {
        .load_op 2, 0, rd, rs1, imm
    }

    def lw rd, rs1, imm {
        .load_op 4, 0, rd, rs1, imm
    }


    def store_op num_of_bytes, rs1, rs2, imm \
            < .mem_data, .ret, .mem_op_byte_length, .write_memory {
        .lea_to_mem_ptr rs1, imm

        hex.mov 2*num_of_bytes, .mem_data, rs2
        hex.set .mem_op_byte_length, num_of_bytes

        stl.fcall .write_memory, .ret
    }

    def sb rs1, rs2, imm {
        .store_op 1, rs1, rs2, imm
    }
    def sh rs1, rs2, imm {
        .store_op 2, rs1, rs2, imm
    }
    def sw rs1, rs2, imm {
        .store_op 4, rs1, rs2, imm
    }


    def addi rd, rs1, imm @ imm_var, end {
        hex.mov .HLEN, rd, rs1
        hex.add .HLEN, rd, imm_var
        ;end

      imm_var:
        hex.vec .HLEN, imm

      end:
    }

    // Sets rd to 1 if [signed] rs1<imm (imm-1-rs1>=0), else to 0.
    def slti rd, rs1, imm @ write1, temp_reg, end {
        hex.set .HLEN, temp_reg, imm-1
        hex.sub .HLEN, temp_reg, rs1

        hex.zero .HLEN, rd
        hex.sign .HLEN, temp_reg, end, write1

      temp_reg:
        .regs.register

      write1:
        rd+dbit;end

      end:
    }
    // Sets rd to 1 if [unsigned] rs1<imm (imm-1-rs1>=0), else to 0.
    def sltiu rd, rs1, imm @ write0, write1, imm_var, end {
        hex.set .HLEN, imm_var, imm

        hex.cmp .HLEN, rs1, imm_var, write0, write1, write1

      imm_var:
        .regs.register

      write0:
        hex.set rd, 0
        ;end
      write1:
        hex.set rd, 1
        ;end

      end:
        hex.zero .HLEN-1, rd+dw
    }

    def xori rd, rs1, imm  @ imm_var, end {
        hex.mov .HLEN, rd, rs1
        hex.xor .HLEN, rd, imm_var
        ;end

      imm_var:
        hex.vec .HLEN, imm

      end:
    }
    def ori rd, rs1, imm  @ imm_var, end {
        hex.mov .HLEN, rd, rs1
        hex.or .HLEN, rd, imm_var
        ;end

      imm_var:
        hex.vec .HLEN, imm

      end:
    }
    def andi rd, rs1, imm  @ imm_var, end {
        hex.mov .HLEN, rd, rs1
        hex.and .HLEN, rd, imm_var
        ;end

      imm_var:
        hex.vec .HLEN, imm

      end:
    }

    def slli rd, rs1, shift_const @ bit_reg, end {
        stl.hex2bit .HLEN, bit_reg, rs1
        bit.shl 4*.HLEN, shift_const, bit_reg
        stl.bit2hex 4*.HLEN, rd, bit_reg
        ;end

      bit_reg:
        bit.vec 4*.HLEN

      end:
    }
    def srli rd, rs1, shift_const @ bit_reg, end {
        stl.hex2bit .HLEN, bit_reg, rs1
        bit.shr 4*.HLEN, shift_const, bit_reg
        stl.bit2hex 4*.HLEN, rd, bit_reg
        ;end

      bit_reg:
        bit.vec 4*.HLEN

      end:
    }
    def srai rd, rs1, shift_const @ bit_reg, end {
        stl.hex2bit .HLEN, bit_reg, rs1
        bit.shra 4*.HLEN, shift_const, bit_reg
        stl.bit2hex 4*.HLEN, rd, bit_reg
        ;end

      bit_reg:
        bit.vec 4*.HLEN

      end:
    }


    def add rd, rs1, rs2 @ result, end {
        hex.mov .HLEN, result, rs1
        hex.add .HLEN, result, rs2
        hex.mov .HLEN, rd, result
        ;end

      result:
        .regs.register

      end:
    }
    def sub rd, rs1, rs2 @ result, end {
        hex.mov .HLEN, result, rs1
        hex.sub .HLEN, result, rs2
        hex.mov .HLEN, rd, result
        ;end

      result:
        .regs.register

      end:
    }
}
