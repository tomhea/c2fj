

// ---------- Init:


ns riscv {
    MEM = 1<<(w-1)                      // start of memory
    JMP = .MEM - (.MEM / 32)            // start of jump table
    BLEN = 4                            // register size in byte-variables
    HLEN = .BLEN * 2                    // register size in hex-variables
    REGISTER_SIZE = .HLEN*dw            // register-variable size in memory bits


    def byte val {
        ;(val > 0xff ? 0xff : (val < 0 ? 0 : val)) * dw
    }
    def byte {
        .byte 0
    }
    ns byte {
        def vec n, val {
            rep(n, i) ..byte (val>>(8*i))&0xff
        }
    }

    def init {
        .regs.init
    }

    ns regs {
        def init > start {
          start:
            .init_x0_to_x4
            .init_x5_to_x7
            .init_x8_to_x9
            .init_x10_to_x17
            .init_x18_to_x27
            .init_x28_to_x31
            .init_pc
        }
        
        def register {
            hex.vec ..HLEN
        }

        def init_x0_to_x4 > x0, zero, x1, ra, x2, sp, x3, gp, x4, tp {
          x0:
          zero:
            .register
          x1:
          ra:
            .register
          x2:
          sp:
            .register
          x3:
          gp:
            .register
          x4:
          tp:
            .register
        }

        def init_x5_to_x7 > x5, t0, x6, t1, x7, t2 {
          x5:
          t0:
            .register
          x6:
          t1:
            .register
          x7:
          t2:
            .register
        }

        def init_x8_to_x9 > x8, s0, fp, x9, s1 {
          x8:
          s0:
          fp:
            .register
          x9:
          s1:
            .register
        }

        def init_x10_to_x17 > x10, a0, x11, a1, x12, a2, x13, a3, x14, a4, x15, a5, x16, a6, x17, a7 {
          x10:
          a0:
            .register
          x11:
          a1:
            .register
          x12:
          a2:
            .register
          x13:
          a3:
            .register
          x14:
          a4:
            .register
          x15:
          a5:
            .register
          x16:
          a6:
            .register
          x17:
          a7:
            .register
        }

        def init_x18_to_x27 > x18, s2, x19, s3, x20, s4, x21, s5, x22, s6, x23, s7, x24, s8, x25, s9, x26, s10, x27, s11 {
          x18:
          s2:
            .register
          x19:
          s3:
            .register
          x20:
          s4:
            .register
          x21:
          s5:
            .register
          x22:
          s6:
            .register
          x23:
          s7:
            .register
          x24:
          s8:
            .register
          x25:
          s9:
            .register
          x26:
          s10:
            .register
          x27:
          s11:
            .register
        }

        def init_x28_to_x31 > x28, t3, x29, t4, x30, t5, x31, t6 {
          x28:
          t3:
            .register
          x29:
          t4:
            .register
          x30:
          t5:
            .register
          x31:
          t6:
            .register
        }

        def init_pc > pc {
          pc:
            .register
        }
    }


    ns syscall {
        //  Time Complexity: 4@+268
        // Space Complexity: 6@+364
        //    prints the exit code (stored at src_register), then finishes.
        def exit src_register_index < riscv.regs.start {
            stl.output "Program exited with exit code "
            hex.print_uint 2, riscv.regs.start + ..REGISTER_SIZE*src_register_index, 1, 1
            stl.output ".\n"
            stl.loop
        }

        //  Time Complexity: 2@
        // Space Complexity: 2@+52
        //   output the least-significant byte of src_register.
        def write_byte src_register_index < riscv.regs.start {
            hex.print riscv.regs.start + ..REGISTER_SIZE * src_register_index
        }

        //  Time Complexity: 10@+14
        // Space Complexity: 10@+108
        //   dst_register = input(8bits)
        def read_byte dst_register_index < riscv.regs.start {
            hex.zero ..HLEN-2, riscv.regs.start + ..REGISTER_SIZE * dst_register_index + 2*dw
            hex.input riscv.regs.start + ..REGISTER_SIZE * dst_register_index
        }

    }


    def start entry_point {
        stl.startup_and_init_all            // inits everything flipjump needs
        ;entry_point                        // start executing riscv opcodes
        .init                               // inits registers
    }


    def inc_pc current_address {
        .__xor_pc_value_by_const current_address ^ (current_address + 4)
    }
    def __xor_pc_value_by_const constant < .regs.pc {
        rep(.HLEN, i) .__xor_by_hex_const .regs.pc + i*dw, (constant >> (i*4)) & 0xf
    }
    def __xor_by_hex_const dst, constant {
        rep(constant != 0, _) stl.wflip_macro dst + dw, constant * dw
    }

    def set_register_value register_index, constant < .regs.start {
        rep(register_index != 0, _) hex.set .HLEN, riscv.regs.start + .REGISTER_SIZE * register_index, constant
    }

    def jump_to_constant_address current_address, new_address {
        .__xor_pc_value_by_const current_address ^ new_address
        ;.JMP + new_address/4*dw
    }

    def jump_to_pc @ ptr < .regs.pc {
        hex.zero w/4, ptr
        hex.xor .HLEN, ptr, .regs.pc
        rep(#w-2, _) hex.shl_bit w/4, ptr
        hex.add_constant w/4, ptr, .JMP

        hex.ptr_jump ptr

      ptr:
        hex.vec w/4
    }

}



// ---------- opcodes

ns riscv {
    def jal rd_index, imm, current_address {
        .set_register_value rd_index, current_address + 4
        .jump_to_constant_address current_address, current_address + imm
    }

    def jalr rd_index, rs1, imm, current_address < .regs.pc {
        .set_register_value rd_index, current_address + 4
        hex.mov .HLEN, .regs.pc, rs1
        rep(imm!=0,_) hex.add_constant .HLEN, .regs.pc, imm % (1<<(4*.HLEN))
        .jump_to_pc
    }

    def lui rd_index, imm {
        .set_register_value rd_index, imm
    }

    def auipc rd_index, imm, addr {
        .set_register_value rd_index, imm + addr
    }

    def beq rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, dont_jump, take_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bne rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, take_jump, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bltu rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, take_jump, dont_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def bgeu rs1, rs2, imm, addr @ take_jump, dont_jump {
        hex.cmp .HLEN, rs1, rs2, dont_jump, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      dont_jump:
        .inc_pc addr
    }

    def blt rs1, rs2, imm, addr @ take_jump, result, dont_jump {
        hex.mov .HLEN, result, rs1
        hex.sub .HLEN, result, rs2
        hex.sign .HLEN, result, take_jump, dont_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      result:
        .regs.register
      dont_jump:
        .inc_pc addr
    }

    def bge rs1, rs2, imm, addr @ take_jump, result, dont_jump {
        hex.mov .HLEN, result, rs1
        hex.sub .HLEN, result, rs2
        hex.sign .HLEN, result, dont_jump, take_jump
      take_jump:
        .jump_to_constant_address addr, imm + addr
      result:
        .regs.register
      dont_jump:
        .inc_pc addr
    }


    def load_op num_of_bytes, sign_extension, rd, rs1, imm @ negative_extension, mem_ptr, end {
        hex.zero w/4, mem_ptr
        hex.xor .HLEN, mem_ptr, rs1
        hex.add_constant w/4, mem_ptr, imm

        rep(#w, _) hex.shl_bit w/4, mem_ptr
        hex.add_constant w/4, mem_ptr, .MEM

        hex.read_byte num_of_bytes, rd, mem_ptr
        stl.comp_if1 num_of_bytes == .BLEN, end

        hex.zero .HLEN - 2*num_of_bytes, rd + 2*num_of_bytes * dw
        stl.comp_if0 sign_extension, end
        hex.sign 2*num_of_bytes, rd, negative_extension, end
      negative_extension:
        hex.not .HLEN - 2*num_of_bytes, rd + 2*num_of_bytes * dw

      mem_ptr:
        hex.vec w/4
      end:
    }

    def lb rd, rs1, imm {
        .load_op 1, 1, rd, rs1, imm
    }
    def lbu rd, rs1, imm {
        .load_op 1, 0, rd, rs1, imm
    }

    def lh rd, rs1, imm {
        .load_op 2, 1, rd, rs1, imm
    }
    def lhu rd, rs1, imm {
        .load_op 2, 0, rd, rs1, imm
    }

    def lw rd, rs1, imm {
        .load_op 4, 0, rd, rs1, imm
    }
}
