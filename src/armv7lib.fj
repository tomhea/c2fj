

// ---------- Init:


ns arm {
    def byte val {
        ;(val > 0xff ? 0xff : (val < 0 ? 0 : val)) * dw
    }
    def byte {
        .byte 0
    }
    ns byte {
        def vec n, val {
            rep(n, i) ..byte (value>>(8*i))&0xff
        }
    }

    def init {
        .regs.init
        ._.structs_init
        ._.functions_init
    }


    ns _ {
        def structs_init {
            // TODO init everything that's flipjumpy.
            bit.ptr_init
            bit.stack 10    // TODO why 10
        }

        def functions_init {
            // TODO
        }
    }

    ns regs {
        def init > r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, \
                r13, sp, r14, lr, r15, pc, CPSR {
            r0:           hex.vec 8
            r1:           hex.vec 8
            r2:           hex.vec 8
            r3:           hex.vec 8
            r4:           hex.vec 8
            r5:           hex.vec 8
            r6:           hex.vec 8
            r7:           hex.vec 8
            r8:           hex.vec 8
            r9:           hex.vec 8
            r10:          hex.vec 8
            r11:          hex.vec 8
            r12:          hex.vec 8
            r13:  sp:     hex.vec 8
            r14:  lr:     hex.vec 8
            r15:  pc:     hex.vec 8
            CPSR:         hex.vec 8
        }
    }
}



// ---------- Jumps:  // TODO ?
